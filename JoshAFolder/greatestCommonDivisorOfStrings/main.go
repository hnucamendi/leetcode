// For two strings s and t, we say "t divides s" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times).
//
// Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.
//
// Example 1:
//
// Input: str1 = "ABCABC", str2 = "ABC"
// Output: "ABC"
//
// Example 2:
//
// Input: str1 = "ABABAB", str2 = "ABAB"
// Output: "AB"
//
// Example 3:
//
// Input: str1 = "LEET", str2 = "CODE"
// Output: ""
//
// Constraints:
//
//	1 <= str1.length, str2.length <= 1000
//	str1 and str2 consist of English uppercase letters.
package main

import (
	"fmt"
	"math"
)

func gcdOfStrings(str1 string, str2 string) string {
	if str1+str2 != str2+str1 {
		return ""
	}

	n1f, n2f := float64(len(str1)), float64(len(str2))
	min := math.Min(n1f, n2f)
	max := math.Max(n1f, n2f)
	for min != 0 {
		r := int(max) % int(min)
		max = min
		min = float64(r)
	}

	return str1[:int(max)]
}

func main() {
	fmt.Println(gcdOfStrings("ABCABC", "ABC"))
	fmt.Println(gcdOfStrings("ABABAB", "ABAB"))
	fmt.Println(gcdOfStrings("LEET", "CODE"))
	fmt.Println(gcdOfStrings("ABABABAB", "ABAB"))
	fmt.Println(gcdOfStrings("TAUXXTAUXXTAUXXTAUXXTAUXX", "TAUXXTAUXXTAUXXTAUXXTAUXXTAUXXTAUXXTAUXXTAUXX"))
	fmt.Println(gcdOfStrings
}
